// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: poolmanager.proto

/*
	Package poolmanager is a generated protocol buffer package.

	It is generated from these files:
		poolmanager.proto

	It has these top-level messages:
		Runner
		LoadBalancerGroup
		GroupPopulation
		GroupPopulationSnapshot
		CapacitySnapshot
		CapacitySnapshotList
*/
package poolmanager

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"
import google_protobuf1 "github.com/golang/protobuf/ptypes/empty"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Runner struct {
	Address   string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	ClientKey []byte `protobuf:"bytes,2,opt,name=client_key,json=clientKey,proto3" json:"client_key,omitempty"`
	Active    bool   `protobuf:"varint,3,opt,name=active,proto3" json:"active,omitempty"`
}

func (m *Runner) Reset()                    { *m = Runner{} }
func (m *Runner) String() string            { return proto.CompactTextString(m) }
func (*Runner) ProtoMessage()               {}
func (*Runner) Descriptor() ([]byte, []int) { return fileDescriptorPoolmanager, []int{0} }

func (m *Runner) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Runner) GetClientKey() []byte {
	if m != nil {
		return m.ClientKey
	}
	return nil
}

func (m *Runner) GetActive() bool {
	if m != nil {
		return m.Active
	}
	return false
}

type LoadBalancerGroup struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *LoadBalancerGroup) Reset()                    { *m = LoadBalancerGroup{} }
func (m *LoadBalancerGroup) String() string            { return proto.CompactTextString(m) }
func (*LoadBalancerGroup) ProtoMessage()               {}
func (*LoadBalancerGroup) Descriptor() ([]byte, []int) { return fileDescriptorPoolmanager, []int{1} }

func (m *LoadBalancerGroup) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type GroupPopulation struct {
	Group      *LoadBalancerGroup         `protobuf:"bytes,1,opt,name=group" json:"group,omitempty"`
	Generation *google_protobuf.Timestamp `protobuf:"bytes,2,opt,name=generation" json:"generation,omitempty"`
	Runners    []*Runner                  `protobuf:"bytes,3,rep,name=runners" json:"runners,omitempty"`
}

func (m *GroupPopulation) Reset()                    { *m = GroupPopulation{} }
func (m *GroupPopulation) String() string            { return proto.CompactTextString(m) }
func (*GroupPopulation) ProtoMessage()               {}
func (*GroupPopulation) Descriptor() ([]byte, []int) { return fileDescriptorPoolmanager, []int{2} }

func (m *GroupPopulation) GetGroup() *LoadBalancerGroup {
	if m != nil {
		return m.Group
	}
	return nil
}

func (m *GroupPopulation) GetGeneration() *google_protobuf.Timestamp {
	if m != nil {
		return m.Generation
	}
	return nil
}

func (m *GroupPopulation) GetRunners() []*Runner {
	if m != nil {
		return m.Runners
	}
	return nil
}

type GroupPopulationSnapshot struct {
	Ts          *google_protobuf.Timestamp `protobuf:"bytes,1,opt,name=ts" json:"ts,omitempty"`
	Populations []*GroupPopulation         `protobuf:"bytes,2,rep,name=populations" json:"populations,omitempty"`
}

func (m *GroupPopulationSnapshot) Reset()         { *m = GroupPopulationSnapshot{} }
func (m *GroupPopulationSnapshot) String() string { return proto.CompactTextString(m) }
func (*GroupPopulationSnapshot) ProtoMessage()    {}
func (*GroupPopulationSnapshot) Descriptor() ([]byte, []int) {
	return fileDescriptorPoolmanager, []int{3}
}

func (m *GroupPopulationSnapshot) GetTs() *google_protobuf.Timestamp {
	if m != nil {
		return m.Ts
	}
	return nil
}

func (m *GroupPopulationSnapshot) GetPopulations() []*GroupPopulation {
	if m != nil {
		return m.Populations
	}
	return nil
}

type CapacitySnapshot struct {
	Generation    *google_protobuf.Timestamp `protobuf:"bytes,1,opt,name=generation" json:"generation,omitempty"`
	Group         *LoadBalancerGroup         `protobuf:"bytes,2,opt,name=group" json:"group,omitempty"`
	InUse         int32                      `protobuf:"varint,3,opt,name=in_use,json=inUse,proto3" json:"in_use,omitempty"`
	TotalRequired int32                      `protobuf:"varint,4,opt,name=total_required,json=totalRequired,proto3" json:"total_required,omitempty"`
}

func (m *CapacitySnapshot) Reset()                    { *m = CapacitySnapshot{} }
func (m *CapacitySnapshot) String() string            { return proto.CompactTextString(m) }
func (*CapacitySnapshot) ProtoMessage()               {}
func (*CapacitySnapshot) Descriptor() ([]byte, []int) { return fileDescriptorPoolmanager, []int{4} }

func (m *CapacitySnapshot) GetGeneration() *google_protobuf.Timestamp {
	if m != nil {
		return m.Generation
	}
	return nil
}

func (m *CapacitySnapshot) GetGroup() *LoadBalancerGroup {
	if m != nil {
		return m.Group
	}
	return nil
}

func (m *CapacitySnapshot) GetInUse() int32 {
	if m != nil {
		return m.InUse
	}
	return 0
}

func (m *CapacitySnapshot) GetTotalRequired() int32 {
	if m != nil {
		return m.TotalRequired
	}
	return 0
}

type CapacitySnapshotList struct {
	Ts        *google_protobuf.Timestamp `protobuf:"bytes,1,opt,name=ts" json:"ts,omitempty"`
	LbId      string                     `protobuf:"bytes,2,opt,name=lb_id,json=lbId,proto3" json:"lb_id,omitempty"`
	Snapshots []*CapacitySnapshot        `protobuf:"bytes,3,rep,name=snapshots" json:"snapshots,omitempty"`
}

func (m *CapacitySnapshotList) Reset()                    { *m = CapacitySnapshotList{} }
func (m *CapacitySnapshotList) String() string            { return proto.CompactTextString(m) }
func (*CapacitySnapshotList) ProtoMessage()               {}
func (*CapacitySnapshotList) Descriptor() ([]byte, []int) { return fileDescriptorPoolmanager, []int{5} }

func (m *CapacitySnapshotList) GetTs() *google_protobuf.Timestamp {
	if m != nil {
		return m.Ts
	}
	return nil
}

func (m *CapacitySnapshotList) GetLbId() string {
	if m != nil {
		return m.LbId
	}
	return ""
}

func (m *CapacitySnapshotList) GetSnapshots() []*CapacitySnapshot {
	if m != nil {
		return m.Snapshots
	}
	return nil
}

func init() {
	proto.RegisterType((*Runner)(nil), "Runner")
	proto.RegisterType((*LoadBalancerGroup)(nil), "LoadBalancerGroup")
	proto.RegisterType((*GroupPopulation)(nil), "GroupPopulation")
	proto.RegisterType((*GroupPopulationSnapshot)(nil), "GroupPopulationSnapshot")
	proto.RegisterType((*CapacitySnapshot)(nil), "CapacitySnapshot")
	proto.RegisterType((*CapacitySnapshotList)(nil), "CapacitySnapshotList")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for NodePoolManager service

type NodePoolManagerClient interface {
	AdvertiseCapacity(ctx context.Context, opts ...grpc.CallOption) (NodePoolManager_AdvertiseCapacityClient, error)
	LoadBalancerGroupFeed(ctx context.Context, in *google_protobuf1.Empty, opts ...grpc.CallOption) (NodePoolManager_LoadBalancerGroupFeedClient, error)
}

type nodePoolManagerClient struct {
	cc *grpc.ClientConn
}

func NewNodePoolManagerClient(cc *grpc.ClientConn) NodePoolManagerClient {
	return &nodePoolManagerClient{cc}
}

func (c *nodePoolManagerClient) AdvertiseCapacity(ctx context.Context, opts ...grpc.CallOption) (NodePoolManager_AdvertiseCapacityClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_NodePoolManager_serviceDesc.Streams[0], c.cc, "/NodePoolManager/AdvertiseCapacity", opts...)
	if err != nil {
		return nil, err
	}
	x := &nodePoolManagerAdvertiseCapacityClient{stream}
	return x, nil
}

type NodePoolManager_AdvertiseCapacityClient interface {
	Send(*CapacitySnapshotList) error
	CloseAndRecv() (*google_protobuf1.Empty, error)
	grpc.ClientStream
}

type nodePoolManagerAdvertiseCapacityClient struct {
	grpc.ClientStream
}

func (x *nodePoolManagerAdvertiseCapacityClient) Send(m *CapacitySnapshotList) error {
	return x.ClientStream.SendMsg(m)
}

func (x *nodePoolManagerAdvertiseCapacityClient) CloseAndRecv() (*google_protobuf1.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(google_protobuf1.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *nodePoolManagerClient) LoadBalancerGroupFeed(ctx context.Context, in *google_protobuf1.Empty, opts ...grpc.CallOption) (NodePoolManager_LoadBalancerGroupFeedClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_NodePoolManager_serviceDesc.Streams[1], c.cc, "/NodePoolManager/LoadBalancerGroupFeed", opts...)
	if err != nil {
		return nil, err
	}
	x := &nodePoolManagerLoadBalancerGroupFeedClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NodePoolManager_LoadBalancerGroupFeedClient interface {
	Recv() (*GroupPopulationSnapshot, error)
	grpc.ClientStream
}

type nodePoolManagerLoadBalancerGroupFeedClient struct {
	grpc.ClientStream
}

func (x *nodePoolManagerLoadBalancerGroupFeedClient) Recv() (*GroupPopulationSnapshot, error) {
	m := new(GroupPopulationSnapshot)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for NodePoolManager service

type NodePoolManagerServer interface {
	AdvertiseCapacity(NodePoolManager_AdvertiseCapacityServer) error
	LoadBalancerGroupFeed(*google_protobuf1.Empty, NodePoolManager_LoadBalancerGroupFeedServer) error
}

func RegisterNodePoolManagerServer(s *grpc.Server, srv NodePoolManagerServer) {
	s.RegisterService(&_NodePoolManager_serviceDesc, srv)
}

func _NodePoolManager_AdvertiseCapacity_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(NodePoolManagerServer).AdvertiseCapacity(&nodePoolManagerAdvertiseCapacityServer{stream})
}

type NodePoolManager_AdvertiseCapacityServer interface {
	SendAndClose(*google_protobuf1.Empty) error
	Recv() (*CapacitySnapshotList, error)
	grpc.ServerStream
}

type nodePoolManagerAdvertiseCapacityServer struct {
	grpc.ServerStream
}

func (x *nodePoolManagerAdvertiseCapacityServer) SendAndClose(m *google_protobuf1.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *nodePoolManagerAdvertiseCapacityServer) Recv() (*CapacitySnapshotList, error) {
	m := new(CapacitySnapshotList)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _NodePoolManager_LoadBalancerGroupFeed_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(google_protobuf1.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NodePoolManagerServer).LoadBalancerGroupFeed(m, &nodePoolManagerLoadBalancerGroupFeedServer{stream})
}

type NodePoolManager_LoadBalancerGroupFeedServer interface {
	Send(*GroupPopulationSnapshot) error
	grpc.ServerStream
}

type nodePoolManagerLoadBalancerGroupFeedServer struct {
	grpc.ServerStream
}

func (x *nodePoolManagerLoadBalancerGroupFeedServer) Send(m *GroupPopulationSnapshot) error {
	return x.ServerStream.SendMsg(m)
}

var _NodePoolManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "NodePoolManager",
	HandlerType: (*NodePoolManagerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AdvertiseCapacity",
			Handler:       _NodePoolManager_AdvertiseCapacity_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "LoadBalancerGroupFeed",
			Handler:       _NodePoolManager_LoadBalancerGroupFeed_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "poolmanager.proto",
}

func (m *Runner) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Runner) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPoolmanager(dAtA, i, uint64(len(m.Address)))
		i += copy(dAtA[i:], m.Address)
	}
	if len(m.ClientKey) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPoolmanager(dAtA, i, uint64(len(m.ClientKey)))
		i += copy(dAtA[i:], m.ClientKey)
	}
	if m.Active {
		dAtA[i] = 0x18
		i++
		if m.Active {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *LoadBalancerGroup) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LoadBalancerGroup) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPoolmanager(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	return i, nil
}

func (m *GroupPopulation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GroupPopulation) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Group != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPoolmanager(dAtA, i, uint64(m.Group.Size()))
		n1, err := m.Group.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Generation != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPoolmanager(dAtA, i, uint64(m.Generation.Size()))
		n2, err := m.Generation.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if len(m.Runners) > 0 {
		for _, msg := range m.Runners {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintPoolmanager(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *GroupPopulationSnapshot) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GroupPopulationSnapshot) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Ts != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPoolmanager(dAtA, i, uint64(m.Ts.Size()))
		n3, err := m.Ts.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if len(m.Populations) > 0 {
		for _, msg := range m.Populations {
			dAtA[i] = 0x12
			i++
			i = encodeVarintPoolmanager(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *CapacitySnapshot) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CapacitySnapshot) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Generation != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPoolmanager(dAtA, i, uint64(m.Generation.Size()))
		n4, err := m.Generation.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.Group != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPoolmanager(dAtA, i, uint64(m.Group.Size()))
		n5, err := m.Group.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.InUse != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPoolmanager(dAtA, i, uint64(m.InUse))
	}
	if m.TotalRequired != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPoolmanager(dAtA, i, uint64(m.TotalRequired))
	}
	return i, nil
}

func (m *CapacitySnapshotList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CapacitySnapshotList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Ts != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPoolmanager(dAtA, i, uint64(m.Ts.Size()))
		n6, err := m.Ts.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if len(m.LbId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPoolmanager(dAtA, i, uint64(len(m.LbId)))
		i += copy(dAtA[i:], m.LbId)
	}
	if len(m.Snapshots) > 0 {
		for _, msg := range m.Snapshots {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintPoolmanager(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeVarintPoolmanager(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Runner) Size() (n int) {
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovPoolmanager(uint64(l))
	}
	l = len(m.ClientKey)
	if l > 0 {
		n += 1 + l + sovPoolmanager(uint64(l))
	}
	if m.Active {
		n += 2
	}
	return n
}

func (m *LoadBalancerGroup) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovPoolmanager(uint64(l))
	}
	return n
}

func (m *GroupPopulation) Size() (n int) {
	var l int
	_ = l
	if m.Group != nil {
		l = m.Group.Size()
		n += 1 + l + sovPoolmanager(uint64(l))
	}
	if m.Generation != nil {
		l = m.Generation.Size()
		n += 1 + l + sovPoolmanager(uint64(l))
	}
	if len(m.Runners) > 0 {
		for _, e := range m.Runners {
			l = e.Size()
			n += 1 + l + sovPoolmanager(uint64(l))
		}
	}
	return n
}

func (m *GroupPopulationSnapshot) Size() (n int) {
	var l int
	_ = l
	if m.Ts != nil {
		l = m.Ts.Size()
		n += 1 + l + sovPoolmanager(uint64(l))
	}
	if len(m.Populations) > 0 {
		for _, e := range m.Populations {
			l = e.Size()
			n += 1 + l + sovPoolmanager(uint64(l))
		}
	}
	return n
}

func (m *CapacitySnapshot) Size() (n int) {
	var l int
	_ = l
	if m.Generation != nil {
		l = m.Generation.Size()
		n += 1 + l + sovPoolmanager(uint64(l))
	}
	if m.Group != nil {
		l = m.Group.Size()
		n += 1 + l + sovPoolmanager(uint64(l))
	}
	if m.InUse != 0 {
		n += 1 + sovPoolmanager(uint64(m.InUse))
	}
	if m.TotalRequired != 0 {
		n += 1 + sovPoolmanager(uint64(m.TotalRequired))
	}
	return n
}

func (m *CapacitySnapshotList) Size() (n int) {
	var l int
	_ = l
	if m.Ts != nil {
		l = m.Ts.Size()
		n += 1 + l + sovPoolmanager(uint64(l))
	}
	l = len(m.LbId)
	if l > 0 {
		n += 1 + l + sovPoolmanager(uint64(l))
	}
	if len(m.Snapshots) > 0 {
		for _, e := range m.Snapshots {
			l = e.Size()
			n += 1 + l + sovPoolmanager(uint64(l))
		}
	}
	return n
}

func sovPoolmanager(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozPoolmanager(x uint64) (n int) {
	return sovPoolmanager(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Runner) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPoolmanager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Runner: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Runner: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoolmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPoolmanager
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoolmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPoolmanager
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientKey = append(m.ClientKey[:0], dAtA[iNdEx:postIndex]...)
			if m.ClientKey == nil {
				m.ClientKey = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Active", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoolmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Active = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipPoolmanager(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPoolmanager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LoadBalancerGroup) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPoolmanager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LoadBalancerGroup: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LoadBalancerGroup: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoolmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPoolmanager
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPoolmanager(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPoolmanager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GroupPopulation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPoolmanager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GroupPopulation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GroupPopulation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Group", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoolmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPoolmanager
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Group == nil {
				m.Group = &LoadBalancerGroup{}
			}
			if err := m.Group.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Generation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoolmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPoolmanager
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Generation == nil {
				m.Generation = &google_protobuf.Timestamp{}
			}
			if err := m.Generation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Runners", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoolmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPoolmanager
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Runners = append(m.Runners, &Runner{})
			if err := m.Runners[len(m.Runners)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPoolmanager(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPoolmanager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GroupPopulationSnapshot) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPoolmanager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GroupPopulationSnapshot: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GroupPopulationSnapshot: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoolmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPoolmanager
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ts == nil {
				m.Ts = &google_protobuf.Timestamp{}
			}
			if err := m.Ts.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Populations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoolmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPoolmanager
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Populations = append(m.Populations, &GroupPopulation{})
			if err := m.Populations[len(m.Populations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPoolmanager(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPoolmanager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CapacitySnapshot) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPoolmanager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CapacitySnapshot: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CapacitySnapshot: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Generation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoolmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPoolmanager
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Generation == nil {
				m.Generation = &google_protobuf.Timestamp{}
			}
			if err := m.Generation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Group", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoolmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPoolmanager
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Group == nil {
				m.Group = &LoadBalancerGroup{}
			}
			if err := m.Group.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InUse", wireType)
			}
			m.InUse = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoolmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InUse |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalRequired", wireType)
			}
			m.TotalRequired = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoolmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalRequired |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPoolmanager(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPoolmanager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CapacitySnapshotList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPoolmanager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CapacitySnapshotList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CapacitySnapshotList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoolmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPoolmanager
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ts == nil {
				m.Ts = &google_protobuf.Timestamp{}
			}
			if err := m.Ts.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LbId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoolmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPoolmanager
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LbId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Snapshots", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoolmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPoolmanager
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Snapshots = append(m.Snapshots, &CapacitySnapshot{})
			if err := m.Snapshots[len(m.Snapshots)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPoolmanager(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPoolmanager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPoolmanager(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPoolmanager
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPoolmanager
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPoolmanager
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthPoolmanager
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowPoolmanager
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipPoolmanager(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthPoolmanager = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPoolmanager   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("poolmanager.proto", fileDescriptorPoolmanager) }

var fileDescriptorPoolmanager = []byte{
	// 503 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x53, 0x4d, 0x6e, 0xd3, 0x40,
	0x14, 0xee, 0x38, 0x4d, 0x42, 0x5e, 0xa0, 0x4d, 0x06, 0x52, 0xac, 0x20, 0x42, 0x30, 0x42, 0xb2,
	0x58, 0x38, 0x28, 0xec, 0xd8, 0x51, 0x44, 0x11, 0xa2, 0x45, 0xd5, 0x00, 0x0b, 0x56, 0xd1, 0x24,
	0xf3, 0x08, 0x23, 0x1c, 0x8f, 0x99, 0x19, 0x57, 0xca, 0x0d, 0x38, 0x02, 0xe2, 0x04, 0x9c, 0x80,
	0x33, 0xb0, 0xe4, 0x08, 0x28, 0x5c, 0x04, 0x75, 0x6c, 0x87, 0xe2, 0x50, 0x50, 0x97, 0xef, 0xbd,
	0xef, 0xbd, 0xef, 0xc7, 0x1e, 0xe8, 0xa6, 0x4a, 0xc5, 0x0b, 0x9e, 0xf0, 0x39, 0xea, 0x28, 0xd5,
	0xca, 0xaa, 0xfe, 0xad, 0xb9, 0x52, 0xf3, 0x18, 0x47, 0xae, 0x9a, 0x66, 0x6f, 0x47, 0x56, 0x2e,
	0xd0, 0x58, 0xbe, 0x48, 0x0b, 0xc0, 0x8d, 0x2a, 0x00, 0x17, 0xa9, 0x5d, 0xe6, 0xc3, 0xe0, 0x0d,
	0x34, 0x58, 0x96, 0x24, 0xa8, 0xa9, 0x0f, 0x4d, 0x2e, 0x84, 0x46, 0x63, 0x7c, 0x32, 0x24, 0x61,
	0x8b, 0x95, 0x25, 0xbd, 0x09, 0x30, 0x8b, 0x25, 0x26, 0x76, 0xf2, 0x1e, 0x97, 0xbe, 0x37, 0x24,
	0xe1, 0x65, 0xd6, 0xca, 0x3b, 0xcf, 0x71, 0x49, 0xf7, 0xa0, 0xc1, 0x67, 0x56, 0x9e, 0xa0, 0x5f,
	0x1b, 0x92, 0xf0, 0x12, 0x2b, 0xaa, 0xe0, 0x0e, 0x74, 0x0f, 0x15, 0x17, 0xfb, 0x3c, 0xe6, 0xc9,
	0x0c, 0xf5, 0x53, 0xad, 0xb2, 0x94, 0xee, 0x80, 0x27, 0x45, 0x41, 0xe0, 0x49, 0x11, 0x7c, 0x26,
	0xb0, 0xeb, 0x26, 0xc7, 0x2a, 0xcd, 0x62, 0x6e, 0xa5, 0x4a, 0x68, 0x08, 0xf5, 0xf9, 0x69, 0xcb,
	0xc1, 0xda, 0x63, 0x1a, 0x6d, 0x9c, 0x61, 0x39, 0x80, 0x3e, 0x04, 0x98, 0x63, 0x82, 0xda, 0xed,
	0x39, 0x65, 0xed, 0x71, 0x3f, 0xca, 0xfd, 0x46, 0xa5, 0xdf, 0xe8, 0x55, 0x19, 0x08, 0x3b, 0x83,
	0xa6, 0xb7, 0xa1, 0xa9, 0x9d, 0x73, 0xe3, 0xd7, 0x86, 0xb5, 0xb0, 0x3d, 0x6e, 0x46, 0x79, 0x12,
	0xac, 0xec, 0x07, 0x4b, 0xb8, 0x5e, 0xd1, 0xf6, 0x32, 0xe1, 0xa9, 0x79, 0xa7, 0x2c, 0xbd, 0x07,
	0x9e, 0x35, 0x85, 0xc0, 0x7f, 0x31, 0x7a, 0xd6, 0xd0, 0x31, 0xb4, 0xd3, 0xf5, 0x05, 0xe3, 0x7b,
	0x8e, 0xad, 0x13, 0x55, 0x4e, 0xb3, 0xb3, 0xa0, 0xe0, 0x2b, 0x81, 0xce, 0x63, 0x9e, 0xf2, 0x99,
	0xb4, 0xcb, 0x35, 0xe9, 0x9f, 0x76, 0xc9, 0x85, 0xec, 0xae, 0x43, 0xf5, 0xfe, 0x17, 0x6a, 0x0f,
	0x1a, 0x32, 0x99, 0x64, 0x26, 0xff, 0x9e, 0x75, 0x56, 0x97, 0xc9, 0x6b, 0x83, 0xf4, 0x2e, 0xec,
	0x58, 0x65, 0x79, 0x3c, 0xd1, 0xf8, 0x21, 0x93, 0x1a, 0x85, 0xbf, 0xed, 0xc6, 0x57, 0x5c, 0x97,
	0x15, 0xcd, 0xe0, 0x23, 0x81, 0x6b, 0x55, 0xe1, 0x87, 0xd2, 0x5c, 0x2c, 0xb1, 0xab, 0x50, 0x8f,
	0xa7, 0x13, 0x29, 0x9c, 0xd8, 0x16, 0xdb, 0x8e, 0xa7, 0xcf, 0x04, 0x1d, 0x41, 0xcb, 0x14, 0x07,
	0xcb, 0x4f, 0xd6, 0x8d, 0xaa, 0x54, 0xec, 0x37, 0x66, 0xfc, 0x85, 0xc0, 0xee, 0x0b, 0x25, 0xf0,
	0x58, 0xa9, 0xf8, 0x28, 0x7f, 0x33, 0xf4, 0x00, 0xba, 0x8f, 0xc4, 0x09, 0x6a, 0x2b, 0x0d, 0x96,
	0xbb, 0xb4, 0x17, 0xfd, 0x4d, 0x71, 0x7f, 0x6f, 0x43, 0xe5, 0x93, 0xd3, 0x97, 0x13, 0x6c, 0x85,
	0x84, 0x1e, 0x41, 0x6f, 0x23, 0xc0, 0x03, 0x44, 0x41, 0xcf, 0x59, 0xea, 0xfb, 0xd1, 0x39, 0xbf,
	0x52, 0xb0, 0x75, 0x9f, 0xec, 0x77, 0xbe, 0xad, 0x06, 0xe4, 0xfb, 0x6a, 0x40, 0x7e, 0xac, 0x06,
	0xe4, 0xd3, 0xcf, 0xc1, 0xd6, 0xb4, 0xe1, 0xf6, 0x1f, 0xfc, 0x0a, 0x00, 0x00, 0xff, 0xff, 0xfa,
	0x93, 0xc6, 0xf2, 0xf2, 0x03, 0x00, 0x00,
}
