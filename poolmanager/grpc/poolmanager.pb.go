// Code generated by protoc-gen-go. DO NOT EDIT.
// source: poolmanager.proto

/*
Package poolmanager is a generated protocol buffer package.

It is generated from these files:
	poolmanager.proto

It has these top-level messages:
	Runner
	LBGroupId
	LBGroupMembership
	CapacitySnapshot
	CapacitySnapshotList
*/
package poolmanager

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"
import google_protobuf1 "github.com/golang/protobuf/ptypes/empty"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Runner struct {
	Address   string `protobuf:"bytes,1,opt,name=address" json:"address,omitempty"`
	ClientKey []byte `protobuf:"bytes,2,opt,name=client_key,json=clientKey,proto3" json:"client_key,omitempty"`
	Active    bool   `protobuf:"varint,3,opt,name=active" json:"active,omitempty"`
}

func (m *Runner) Reset()                    { *m = Runner{} }
func (m *Runner) String() string            { return proto.CompactTextString(m) }
func (*Runner) ProtoMessage()               {}
func (*Runner) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Runner) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Runner) GetClientKey() []byte {
	if m != nil {
		return m.ClientKey
	}
	return nil
}

func (m *Runner) GetActive() bool {
	if m != nil {
		return m.Active
	}
	return false
}

type LBGroupId struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *LBGroupId) Reset()                    { *m = LBGroupId{} }
func (m *LBGroupId) String() string            { return proto.CompactTextString(m) }
func (*LBGroupId) ProtoMessage()               {}
func (*LBGroupId) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *LBGroupId) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type LBGroupMembership struct {
	GroupId *LBGroupId `protobuf:"bytes,1,opt,name=group_id,json=groupId" json:"group_id,omitempty"`
	Runners []*Runner  `protobuf:"bytes,2,rep,name=runners" json:"runners,omitempty"`
}

func (m *LBGroupMembership) Reset()                    { *m = LBGroupMembership{} }
func (m *LBGroupMembership) String() string            { return proto.CompactTextString(m) }
func (*LBGroupMembership) ProtoMessage()               {}
func (*LBGroupMembership) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *LBGroupMembership) GetGroupId() *LBGroupId {
	if m != nil {
		return m.GroupId
	}
	return nil
}

func (m *LBGroupMembership) GetRunners() []*Runner {
	if m != nil {
		return m.Runners
	}
	return nil
}

type CapacitySnapshot struct {
	GroupId        *LBGroupId `protobuf:"bytes,1,opt,name=group_id,json=groupId" json:"group_id,omitempty"`
	MemMbCommitted int32      `protobuf:"varint,2,opt,name=mem_mb_committed,json=memMbCommitted" json:"mem_mb_committed,omitempty"`
	MemMbTotal     int32      `protobuf:"varint,3,opt,name=mem_mb_total,json=memMbTotal" json:"mem_mb_total,omitempty"`
}

func (m *CapacitySnapshot) Reset()                    { *m = CapacitySnapshot{} }
func (m *CapacitySnapshot) String() string            { return proto.CompactTextString(m) }
func (*CapacitySnapshot) ProtoMessage()               {}
func (*CapacitySnapshot) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *CapacitySnapshot) GetGroupId() *LBGroupId {
	if m != nil {
		return m.GroupId
	}
	return nil
}

func (m *CapacitySnapshot) GetMemMbCommitted() int32 {
	if m != nil {
		return m.MemMbCommitted
	}
	return 0
}

func (m *CapacitySnapshot) GetMemMbTotal() int32 {
	if m != nil {
		return m.MemMbTotal
	}
	return 0
}

type CapacitySnapshotList struct {
	Ts        *google_protobuf.Timestamp `protobuf:"bytes,1,opt,name=ts" json:"ts,omitempty"`
	LbId      string                     `protobuf:"bytes,2,opt,name=lb_id,json=lbId" json:"lb_id,omitempty"`
	Snapshots []*CapacitySnapshot        `protobuf:"bytes,3,rep,name=snapshots" json:"snapshots,omitempty"`
}

func (m *CapacitySnapshotList) Reset()                    { *m = CapacitySnapshotList{} }
func (m *CapacitySnapshotList) String() string            { return proto.CompactTextString(m) }
func (*CapacitySnapshotList) ProtoMessage()               {}
func (*CapacitySnapshotList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *CapacitySnapshotList) GetTs() *google_protobuf.Timestamp {
	if m != nil {
		return m.Ts
	}
	return nil
}

func (m *CapacitySnapshotList) GetLbId() string {
	if m != nil {
		return m.LbId
	}
	return ""
}

func (m *CapacitySnapshotList) GetSnapshots() []*CapacitySnapshot {
	if m != nil {
		return m.Snapshots
	}
	return nil
}

func init() {
	proto.RegisterType((*Runner)(nil), "Runner")
	proto.RegisterType((*LBGroupId)(nil), "LBGroupId")
	proto.RegisterType((*LBGroupMembership)(nil), "LBGroupMembership")
	proto.RegisterType((*CapacitySnapshot)(nil), "CapacitySnapshot")
	proto.RegisterType((*CapacitySnapshotList)(nil), "CapacitySnapshotList")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for NodePoolScaler service

type NodePoolScalerClient interface {
	AdvertiseCapacity(ctx context.Context, in *CapacitySnapshotList, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
}

type nodePoolScalerClient struct {
	cc *grpc.ClientConn
}

func NewNodePoolScalerClient(cc *grpc.ClientConn) NodePoolScalerClient {
	return &nodePoolScalerClient{cc}
}

func (c *nodePoolScalerClient) AdvertiseCapacity(ctx context.Context, in *CapacitySnapshotList, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/NodePoolScaler/AdvertiseCapacity", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for NodePoolScaler service

type NodePoolScalerServer interface {
	AdvertiseCapacity(context.Context, *CapacitySnapshotList) (*google_protobuf1.Empty, error)
}

func RegisterNodePoolScalerServer(s *grpc.Server, srv NodePoolScalerServer) {
	s.RegisterService(&_NodePoolScaler_serviceDesc, srv)
}

func _NodePoolScaler_AdvertiseCapacity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CapacitySnapshotList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodePoolScalerServer).AdvertiseCapacity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NodePoolScaler/AdvertiseCapacity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodePoolScalerServer).AdvertiseCapacity(ctx, req.(*CapacitySnapshotList))
	}
	return interceptor(ctx, in, info, handler)
}

var _NodePoolScaler_serviceDesc = grpc.ServiceDesc{
	ServiceName: "NodePoolScaler",
	HandlerType: (*NodePoolScalerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AdvertiseCapacity",
			Handler:    _NodePoolScaler_AdvertiseCapacity_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "poolmanager.proto",
}

// Client API for RunnerManager service

type RunnerManagerClient interface {
	GetLBGroup(ctx context.Context, in *LBGroupId, opts ...grpc.CallOption) (*LBGroupMembership, error)
}

type runnerManagerClient struct {
	cc *grpc.ClientConn
}

func NewRunnerManagerClient(cc *grpc.ClientConn) RunnerManagerClient {
	return &runnerManagerClient{cc}
}

func (c *runnerManagerClient) GetLBGroup(ctx context.Context, in *LBGroupId, opts ...grpc.CallOption) (*LBGroupMembership, error) {
	out := new(LBGroupMembership)
	err := grpc.Invoke(ctx, "/RunnerManager/GetLBGroup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RunnerManager service

type RunnerManagerServer interface {
	GetLBGroup(context.Context, *LBGroupId) (*LBGroupMembership, error)
}

func RegisterRunnerManagerServer(s *grpc.Server, srv RunnerManagerServer) {
	s.RegisterService(&_RunnerManager_serviceDesc, srv)
}

func _RunnerManager_GetLBGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LBGroupId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunnerManagerServer).GetLBGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RunnerManager/GetLBGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunnerManagerServer).GetLBGroup(ctx, req.(*LBGroupId))
	}
	return interceptor(ctx, in, info, handler)
}

var _RunnerManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "RunnerManager",
	HandlerType: (*RunnerManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLBGroup",
			Handler:    _RunnerManager_GetLBGroup_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "poolmanager.proto",
}

func init() { proto.RegisterFile("poolmanager.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 430 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x52, 0xd1, 0x6a, 0xd4, 0x40,
	0x14, 0x6d, 0xb2, 0xee, 0x6e, 0xf7, 0xb6, 0x2e, 0xdd, 0x51, 0x4b, 0xd8, 0x22, 0xc6, 0x80, 0x10,
	0x7c, 0x98, 0x85, 0xf5, 0x03, 0x44, 0xab, 0x94, 0x62, 0x57, 0x64, 0x5a, 0x04, 0x1f, 0x64, 0x99,
	0x24, 0xd7, 0x74, 0x30, 0x93, 0x09, 0x33, 0x77, 0x0b, 0xfb, 0x01, 0x82, 0x9f, 0x2d, 0x9b, 0x4c,
	0x54, 0xb6, 0x3e, 0xf8, 0x78, 0xcf, 0x9c, 0x9c, 0x9c, 0x7b, 0xce, 0x85, 0x59, 0x63, 0x4c, 0xa5,
	0x65, 0x2d, 0x4b, 0xb4, 0xbc, 0xb1, 0x86, 0xcc, 0xfc, 0x59, 0x69, 0x4c, 0x59, 0xe1, 0xa2, 0x9d,
	0xb2, 0xcd, 0xb7, 0x05, 0x29, 0x8d, 0x8e, 0xa4, 0x6e, 0x3c, 0xe1, 0x6c, 0x9f, 0x80, 0xba, 0xa1,
	0x6d, 0xf7, 0x98, 0x7c, 0x81, 0x91, 0xd8, 0xd4, 0x35, 0x5a, 0x16, 0xc1, 0x58, 0x16, 0x85, 0x45,
	0xe7, 0xa2, 0x20, 0x0e, 0xd2, 0x89, 0xe8, 0x47, 0xf6, 0x14, 0x20, 0xaf, 0x14, 0xd6, 0xb4, 0xfe,
	0x8e, 0xdb, 0x28, 0x8c, 0x83, 0xf4, 0x58, 0x4c, 0x3a, 0xe4, 0x03, 0x6e, 0xd9, 0x29, 0x8c, 0x64,
	0x4e, 0xea, 0x0e, 0xa3, 0x41, 0x1c, 0xa4, 0x87, 0xc2, 0x4f, 0xc9, 0x19, 0x4c, 0xae, 0xde, 0x5e,
	0x58, 0xb3, 0x69, 0x2e, 0x0b, 0x36, 0x85, 0x50, 0x15, 0x5e, 0x38, 0x54, 0x45, 0xf2, 0x15, 0x66,
	0xfe, 0x71, 0x85, 0x3a, 0x43, 0xeb, 0x6e, 0x55, 0xc3, 0x5e, 0xc0, 0x61, 0xb9, 0x83, 0xd6, 0x9e,
	0x7a, 0xb4, 0x04, 0xfe, 0x5b, 0x42, 0x8c, 0x4b, 0xaf, 0xf5, 0x1c, 0xc6, 0xb6, 0xf5, 0xec, 0xa2,
	0x30, 0x1e, 0xa4, 0x47, 0xcb, 0x31, 0xef, 0x76, 0x10, 0x3d, 0x9e, 0xfc, 0x08, 0xe0, 0xe4, 0x5c,
	0x36, 0x32, 0x57, 0xb4, 0xbd, 0xae, 0x65, 0xe3, 0x6e, 0x0d, 0xfd, 0xaf, 0x7c, 0x0a, 0x27, 0x1a,
	0xf5, 0x5a, 0x67, 0xeb, 0xdc, 0x68, 0xad, 0x88, 0xb0, 0x68, 0x97, 0x1e, 0x8a, 0xa9, 0x46, 0xbd,
	0xca, 0xce, 0x7b, 0x94, 0xc5, 0x70, 0xec, 0x99, 0x64, 0x48, 0x56, 0xed, 0xfe, 0x43, 0x01, 0x2d,
	0xeb, 0x66, 0x87, 0x24, 0x3f, 0x03, 0x78, 0xbc, 0xef, 0xe3, 0x4a, 0x39, 0x62, 0x2f, 0x21, 0x24,
	0xe7, 0x5d, 0xcc, 0x79, 0xd7, 0x10, 0xef, 0x1b, 0xe2, 0x37, 0x7d, 0x85, 0x22, 0x24, 0xc7, 0x1e,
	0xc1, 0xb0, 0xca, 0x76, 0xa6, 0xc3, 0x36, 0xbe, 0x07, 0x55, 0x76, 0x59, 0xb0, 0x05, 0x4c, 0x9c,
	0x17, 0x74, 0xd1, 0xa0, 0x8d, 0x61, 0xc6, 0xf7, 0x7f, 0x25, 0xfe, 0x70, 0x96, 0x9f, 0x61, 0xfa,
	0xd1, 0x14, 0xf8, 0xc9, 0x98, 0xea, 0x3a, 0x97, 0x15, 0x5a, 0xf6, 0x0e, 0x66, 0x6f, 0x8a, 0x3b,
	0xb4, 0xa4, 0x1c, 0xf6, 0x5f, 0xb2, 0x27, 0xfc, 0x5f, 0x7e, 0xe7, 0xa7, 0xf7, 0x3c, 0xbe, 0xdf,
	0x5d, 0x51, 0x72, 0xb0, 0x7c, 0x0d, 0x0f, 0xbb, 0xf4, 0x57, 0xdd, 0x59, 0x32, 0x0e, 0x70, 0x81,
	0xe4, 0x83, 0x65, 0x7f, 0x45, 0x3c, 0x67, 0xfc, 0x5e, 0xe7, 0xc9, 0x41, 0x36, 0x6a, 0x25, 0x5f,
	0xfd, 0x0a, 0x00, 0x00, 0xff, 0xff, 0x78, 0x71, 0x67, 0x10, 0xdc, 0x02, 0x00, 0x00,
}
